service: 
  name: keepitclean-backend-nodejs

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-sequelize-migrations

custom:
  region: us-east-1
  stage: dev
  stackPrefix: ${opt:stackPrefix, 'keep-it-clean'}
  baseStack: ${opt:stackPrefix, 'keep-it-clean'}-${opt:stage, 'dev'}-base-infra
  VpcStack: ${opt:vpc_stack}

provider:
  name: aws
  logs:
    websocket: true
  stage: ${opt:stage,'dev'}
  stackName: ${opt:stackPrefix, 'keep-it-clean'}-${opt:stage, 'dev'}-web-backend
  apiGateway:
    minimumCompressionSize: 0
  runtime: nodejs12.x
  memorySize: 512
  timeout: 30
  versionFunctions: false
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
    - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
    - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
  vpc:
    securityGroupIds:
      - ${cf:${self:custom.baseStack}.VPCLambdaSecurityGroup}
    subnetIds:
      - ${cf:${self:custom.baseStack}.VpcLambdaPrivateSubnet}
  tags:
    OWNER: indrapranesh
    DESCRIPTION: In the purpose of Web Backend
  environment:
    DB_DIALECT: mysql
    DB_PORT: 3306
    DB_HOST: ${cf:${self:custom.baseStack}.RDSHost}
    DB_NAME: database_master
    DATABASE: database_master
    DB_USERNAME: db_user
    DB_PASSWORD: testpass
    USER_POOLID: ${cf:${self:custom.baseStack}.UserPoolId}
    CLIENT_ID: ${cf:${self:custom.baseStack}.UserPoolClientId}

functions:

  # User API
  
  create: 
    handler: src/api/user.create
    events:
      - http:
          path: api/user
          method: post
          cors: true
          integration: lambda
        
  getAllUsers: 
    handler: src/api/user.getAllUsers
    events:
      - http:
          path: api/users
          method: get
          cors: true
          integration: lambda

  getUserById: 
    handler: src/api/user.getUserById
    events:
      - http:
          path: api/user/{userId}
          method: get
          cors: true
          integration: lambda


  # Session API

  login:
    handler: src/api/session.login
    events:
      - http:
          path: api/login
          method: post
          integration: lambda

  signUp:
    handler: src/api/session.signUp
    events:
      - http:
          path: api/signup
          method: post
          integration: lambda

  changePassword:
    handler: src/api/session.changePassword
    events:
      - http:
          path: api/password/change
          method: post
          integration: lambda

  verifyUser:
    handler: src/api/session.verifyUser
    events:
      - http:
          path: api/user/verify
          method: post
          integration: lambda
  
  refreshSession:
    handler: src/api/session.refreshSession
    events:
      - http:
          path: api/user/verify
          method: post
          integration: lambda

  forgetPassword:
    handler: src/api/session.forgetPassword
    events:
      - http:
          path: api/password/forget
          method: post
          integration: lambda

  confirmForgotPassword:
    handler: src/api/session.confirmForgotPassword
    events:
      - http:
          path: api/password/reset
          method: post
          integration: lambda


  # Event API

  createEvent:
    handler: src/api/event.createEvent
    events:
      - http:
          path: api/event
          method: post
          cors: true
          integration: lambda

  getAllEvents:
    handler: src/api/event.getAllEvents
    events:
      - http:
          path: api/events
          method: get
          cors: true
          integration: lambda

  getEventById:
    handler: src/api/event.getEventById
    events:
      - http:
          path: api/event/{eventId}
          method: get
          cors: true
          integration: lambda

  getHostedEventsByUser:
    handler: src/api/event.getHostedEventsByUser
    events:
      - http:
          path: api/event/host/{userId}
          method: get
          cors: true
          integration: lambda

  getJoinedEventsByUser:
    handler: src/api/event.getJoinedEventsByUser
    events:
      - http:
          path: api/event/join/{userId}
          method: get
          cors: true
          integration: lambda

  deleteEvent:
    handler: src/api/event.deleteEvent
    events:
      - http:
          path: api/event/{eventId}
          method: delete
          cors: true
          integration: lambda
resources:
  - ${file(./serverless-assets/serverless-template.yml)}
